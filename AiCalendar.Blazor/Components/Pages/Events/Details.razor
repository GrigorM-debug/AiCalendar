@page "/events/details/{eventId}"
@* @attribute [Authorize] *@
@using System.Globalization
@using AiCalendar.Blazor.Components.Utils
@using AiCalendar.Blazor.ViewModels.Events
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Details> Logger
@inject StatusCodeErrorHandeller StatusCodeErrorHandeller
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@if (_event != null)
{
    <h3 class="text-center">Event Details</h3>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title mb-3">Title: @_event.Title</h5>
            <h6 class="card-subtitle mb-3 text-muted">Start: @_event.StartDate.ToString("f", CultureInfo.InvariantCulture)</h6>
            <h6 class="card-subtitle mb-3 text-muted">End: @_event.EndDate.ToString("f", CultureInfo.InvariantCulture)</h6>

            <p class="card-text mb-3">Description: @_event.Description</p>

            @if (_event.IsCancelled)
            {
                <span class="badge bg-warning text-dark">Status: Cancelled</span>
            }
            else if (_event.EndDate < DateTime.UtcNow)
            {
                <span class="badge bg-secondary">Status: Past Event</span>
            }
            else
            {
                <span class="badge bg-success">Status: Active</span>
            }
        

            @* Table for event participants *@
            <div class="d-flex justify-content-lg-between">
                <p class="card-text"> Participants: </p>
                @if(!_event.IsCancelled)
                {
                    <button
                        class="btn"
                        style="background-color: purple; color: white"
                        @onclick="SelectParticipants"
                    >
                        Select Participants
                    </button>
                }
            </div>
        </div>
        @if (_event.Participants.Any())
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var p in _event.Participants)
                {
                    <tr>
                        <td>@p.UserName</td>
                        <td>@p.Email</td>
                        <td>
                            @if (UserId == _event.CreatorId)
                            {
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveParticipant(p.Id)">Remove</button>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <p class="card-text">No participants yet.</p>
        }

        <div class="card-footer d-flex justify-content-between">
            @if (!_event.IsCancelled && UserId == _event.CreatorId)
            {
                <button class="btn btn-warning" @onclick="CancelEvent">Cancel Event</button>
            }

            @if (UserId == _event.CreatorId)
            {
                <button class="btn btn-info" @onclick="UpdateEvent">Update Event</button>
                <button class="btn btn-danger" @onclick="DeleteEvent">Delete Event</button>
            }
        </div>
    </div>
}
else
{
    <Spinner />
}

@code {
    [Parameter]
    public string eventId { get; set; }

    private EventViewModel? _event = new EventViewModel();

    [CascadingParameter] 
    protected Task<AuthenticationState> AuthState { get; set; }

    private string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;

        if (!(user.Identity?.IsAuthenticated ?? false))
        {
            Navigation.NavigateTo("/status-code/401", forceLoad: true);
        }

        UserId = user.FindFirst(c => c.Type == "sub")?.Value;

        if (string.IsNullOrEmpty(UserId))
        {
            Navigation.NavigateTo("/status-code/401", forceLoad: true);
        }

        // Load event details using eventId
        await FetchEventData();
    }

    private async Task FetchEventData()
    {
        try
        {
            var response = await Http.GetAsync($"api/v1/Event/{eventId}");

            if (response.IsSuccessStatusCode)
            {
                _event = await response.Content.ReadFromJsonAsync<EventViewModel>();
            }
            else
            {
                StatusCodeErrorHandeller.HandleStatusCode(response);
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "Error fetching events");
        }
    }

    private async Task CancelEvent()
    {
        if (UserId != _event.CreatorId)
        {
            Navigation.NavigateTo("/status-code/403", forceLoad: true);
            await JSRuntime.InvokeVoidAsync("showAlert", "You have to be the event creator to cancelled it", "error");
        }

        if (_event == null || _event.IsCancelled)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "Event is already cancelled", "error");
        }

        try
        {
            var response = await Http.PatchAsync($"api/v1/Event/{eventId}/cancel", null);

            if (response.IsSuccessStatusCode)
            {
                await FetchEventData();
                await JSRuntime.InvokeVoidAsync("showAlert", "Event cancelled successfully! 🎉", "success");
            }
            else
            {
                StatusCodeErrorHandeller.HandleStatusCode(response);
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "Error cancelling event");
        }
    }

    private async Task RemoveParticipant(string participantId)
    {
        if (UserId != _event.CreatorId)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "You have to be the event creator to remove a participant", "error");
            Navigation.NavigateTo("/status-code/403", forceLoad: true);
        }

        try
        {
            var response = await Http.DeleteAsync($"api/v1/EventParticipants/events/{eventId}/participants/{participantId}");

            if (response.IsSuccessStatusCode)
            {
                await FetchEventData();
                await JSRuntime.InvokeVoidAsync("showAlert", "Participant removed successfully! 🎉", "success");
            }
            else
            {
                StatusCodeErrorHandeller.HandleStatusCode(response);
            }
        }
        catch (HttpRequestException exception)
        {
            Logger.LogError(exception, "Error removing participant");
        }
    }

    private async Task DeleteEvent()
    {
        if (UserId != _event.CreatorId)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "You have to be the event creator to delete it", "error");
            Navigation.NavigateTo("/status-code/403", forceLoad: true);
        }

        try
        {
            var response = await Http.DeleteAsync($"api/v1/Event/{eventId}");

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/events", forceLoad: true);
                await JSRuntime.InvokeVoidAsync("showAlert", "Event deleted successfully! 🎉", "success");
            }
            else
            {
                StatusCodeErrorHandeller.HandleStatusCode(response);
            }
        }
        catch (HttpRequestException exception)
        {
            Logger.LogError(exception, "Error deleting event");
        }
    }

    private void UpdateEvent()
    {
        if (UserId != _event.CreatorId)
        {
            Navigation.NavigateTo("/status-code/403", forceLoad: true);
        }

        // Navigate to update event page
        Navigation.NavigateTo($"/events/update/{eventId}", forceLoad: true);
    }

    private void SelectParticipants()
    {
        if (UserId != _event.CreatorId)
        {
            Navigation.NavigateTo("/status-code/403", forceLoad: true);
        }

        string creatorId = _event.CreatorId;

        Navigation.NavigateTo($"/event/{eventId}/select-participants/{creatorId}", forceLoad: true);
    }
}
