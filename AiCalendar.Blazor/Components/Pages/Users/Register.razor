@page "/users/register"
@attribute [AllowAnonymous]
@using AiCalendar.Blazor.Components.Utils
@using AiCalendar.Blazor.ViewModels.Users
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject StatusCodeErrorHandeller StatusCodeErrorHandeller
@inject ILogger<Register> Logger
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3 class="text-center">Register</h3>

<EditForm FormName="Register" Model="Model" OnValidSubmit="Submit" Method="post" class="row g-3">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="inputUsername" class="form-label">UserName</label>
        <InputText id="inputUsername" class="form-control" @bind-Value="Model.UserName" />
        <ValidationMessage For="@(() => Model.UserName)" />
    </div>
    <div class="mb-3">
        <label for="inputEmail" class="form-label">Email</label>
        <InputText id="inputEmail" class="form-control" @bind-Value="Model.Email" />
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    <div class="mb-3">
        <label for="inputPassword" class="form-label">Password</label>
        <InputText id="inputPassword" type="password" class="form-control" @bind-Value="Model.Password" />
        <ValidationMessage For="@(() => Model.Password)" />
    </div>
    <div class="mb-3">
        <NavLink href="users/login" style="color: purple;">Already have account</NavLink>
    </div>
    <div class="mb-3 text-center">
        <button 
            type="submit" 
            class="btn btn-primary btn-lg mx-auto" 
            style="background-color: purple;"
            disabled="@isDisabled"
            >Register</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private LoginAndRegisterInputViewModel? Model { get; set; }

    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }

    private bool isDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }

        Model ??= new();
    }

    private async Task Submit()
    {
        isDisabled = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/v1/User/register", Model);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("users/login", forceLoad: true);
                await JSRuntime.InvokeVoidAsync("showAlert", "Successfully registered new user! 🎉", "success");
            }
            else
            {
                StatusCodeErrorHandeller.HandleStatusCode(response);
            }
        }
        catch (HttpRequestException exception)
        {
            Logger.LogError(exception, "An error occurred during registration.");
        }
    }
}
