@page "/users/login"
@attribute [AllowAnonymous]
@inject StatusCodeErrorHandeller StatusCodeErrorHandeller
@inject NavigationManager Navigation
@using AiCalendar.Blazor.Components.Utils
@using AiCalendar.Blazor.Services
@using AiCalendar.Blazor.ViewModels.Users
@using Microsoft.AspNetCore.Authorization
@inject ILogger<Login> Logger
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@* @inject IUserSessionManager UserSessionManager  *@

<h3 class="text-center">Login</h3>

<EditForm FormName="Login" Model="Model" OnValidSubmit="Submit" Method="post" class="row g-3">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="inputUsername" class="form-label">UserName</label>
        <InputText id="inputUsername" class="form-control" @bind-Value="Model.UserName" />
        <ValidationMessage For="@(() => Model.UserName)" />
    </div>
    <div class="mb-3">
        <label for="inputEmail" class="form-label">Email</label>
        <InputText id="inputEmail" class="form-control" @bind-Value="Model.Email" />
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    <div class="mb-3">
        <label for="inputPassword" class="form-label">Password</label>
        <InputText id="inputPassword" type="password" class="form-control" @bind-Value="Model.Password" />
        <ValidationMessage For="@(() => Model.Password)" />
        @if (!string.IsNullOrEmpty(WrongPasswordMessage))
        {
            <p class="text-danger">@WrongPasswordMessage</p>
        }
    </div>
    <div class="mb-3">
        <NavLink href="users/register" style="color: purple;">Don't have account'</NavLink>
    </div>
    <div class="mb-3 text-center">
        <button 
            type="submit" 
            class="btn btn-primary btn-lg mx-auto" 
            style="background-color: purple;"
            disabled="@isDisabled"
            >Login</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private LoginAndRegisterInputViewModel? Model { get; set; }

    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }

    private bool isDisabled = false;

    private string WrongPasswordMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }

        Model ??= new();
    }

    private async Task Submit()
    {
        isDisabled = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/v1/User/login", Model);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<LoginResponseViewModel>();

                if (!string.IsNullOrEmpty(responseData.Token))
                {
                    await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(responseData.Token);
                    // await UserSessionManager.SignInUserAsync(responseData.Token);
                }

                Navigation.NavigateTo("/", forceLoad: true);

                await JSRuntime.InvokeVoidAsync("showAlert", "Successfully logged in! 🎉", "success");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                if (responseContent.Contains("password"))
                {
                    WrongPasswordMessage = responseContent;
                    await JSRuntime.InvokeVoidAsync("showAlert", "Wrong password !", "error");
                }
            }
            else
            {
                StatusCodeErrorHandeller.HandleStatusCode(response);
            }
        }
        catch (HttpRequestException exception)
        {
            Logger.LogError(exception, "An error occurred during registration.");
        }

        isDisabled = false;
    }
}
