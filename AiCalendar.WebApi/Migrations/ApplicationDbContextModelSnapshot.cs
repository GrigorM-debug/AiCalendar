// <auto-generated />
using System;
using AiCalendar.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AiCalendar.WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AiCalendar.WebApi.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the event");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user who created the event");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("The description of the event");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("The end time of the event");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("The start time of the event");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The title of the event");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1000000-0000-0000-0000-000000000001"),
                            CreatorId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            Description = "Daily team synchronization meeting.",
                            EndTime = new DateTime(2025, 6, 16, 9, 30, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 6, 16, 9, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Team Stand-up Meeting"
                        },
                        new
                        {
                            Id = new Guid("e1000000-0000-0000-0000-000000000002"),
                            CreatorId = new Guid("f0e9d8c7-b6a5-4321-fedc-ba9876543210"),
                            Description = "Review progress on Project X with stakeholders.",
                            EndTime = new DateTime(2025, 6, 17, 15, 30, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 6, 17, 14, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Project X Review"
                        },
                        new
                        {
                            Id = new Guid("e1000000-0000-0000-0000-000000000003"),
                            CreatorId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Description = "Routine check-up.",
                            EndTime = new DateTime(2025, 6, 20, 9, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 6, 20, 8, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Dentist Appointment"
                        },
                        new
                        {
                            Id = new Guid("e1000000-0000-0000-0000-000000000004"),
                            CreatorId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            Description = "Exploring the Vitosha mountains.",
                            EndTime = new DateTime(2025, 6, 21, 15, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2025, 6, 21, 7, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Weekend Hike"
                        });
                });

            modelBuilder.Entity("AiCalendar.WebApi.Models.Participant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user who participate in the event");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the event that user participate");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("f0e9d8c7-b6a5-4321-fedc-ba9876543210"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("f0e9d8c7-b6a5-4321-fedc-ba9876543210"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("f0e9d8c7-b6a5-4321-fedc-ba9876543210"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            EventId = new Guid("e1000000-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("AiCalendar.WebApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the user");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The email address of the user");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The hashed user password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The username of the user");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            Email = "admin@example.com",
                            PasswordHashed = "hashedpassword123",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("f0e9d8c7-b6a5-4321-fedc-ba9876543210"),
                            Email = "heisenberg@example.com",
                            PasswordHashed = "hashedpassword456",
                            UserName = "Heisenberg"
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Email = "jessie@example.com",
                            PasswordHashed = "hashedpassword789",
                            UserName = "JessiePinkman"
                        });
                });

            modelBuilder.Entity("AiCalendar.WebApi.Models.Event", b =>
                {
                    b.HasOne("AiCalendar.WebApi.Models.User", "Creator")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("AiCalendar.WebApi.Models.Participant", b =>
                {
                    b.HasOne("AiCalendar.WebApi.Models.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AiCalendar.WebApi.Models.User", "User")
                        .WithMany("Participations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AiCalendar.WebApi.Models.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("AiCalendar.WebApi.Models.User", b =>
                {
                    b.Navigation("CreatedEvents");

                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
